{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","flightId","airline","origin","destinantion","std","Date","etd","formData","setFormData","handleChange","evt","target","name","value","handleDateChange","date","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","Grid","container","spacing","item","xs","TextField","required","label","fullWidth","autoFocus","onChange","FormControl","InputLabel","Select","MenuItem","sm","destination","margin","KeyboardButtonProps","bind","DialogActions","Button","onClick","color","variant","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","blue","ReactDOM","render","StrictMode","CssBaseline","ThemeProvider","utils","DateFnsUtils","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55101da3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport { KeyboardTimePicker } from '@material-ui/pickers'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport Select from \"@material-ui/core/Select\"\nimport FormLabel from '@material-ui/core/FormLabel'\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport InputLabel from \"@material-ui/core/InputLabel\"\n\n\nfunction App() {\n  const [formData, setFormData] = useState({\n    flightId: \"\",\n    airline: \"\",\n    origin: \"\",\n    destinantion: \"\",\n    std: new Date('2020-05-18T21:15:54'),\n    etd: null\n  });\n\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(formData => ({...formData, [name]: value}));\n  }\n\n  function handleDateChange(name, date) {\n    setFormData(formData => ({...formData, [name]: date}))\n  }\n\n  return (\n    <Dialog open={true} onClose={true} aria-labelledby=\"\">\n      <DialogTitle id=\"\">Add Flight</DialogTitle>\n      <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs=\"12\">\n              <TextField\n                required\n                label=\"Flight Number\"\n                name=\"flightId\"\n                value={formData.flightId}\n                fullWidth\n                autoFocus\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs=\"12\">\n                <FormControl fullWidth>\n                  <InputLabel>Airline</InputLabel>\n                  <Select value={formData.airline} onChange={handleChange} name=\"airline\">\n                    <MenuItem value=\"delta\">Delta</MenuItem>\n                    <MenuItem value=\"american-airlines\">American Airlines</MenuItem>\n                    <MenuItem value=\"united-airlines\">United Airlines</MenuItem>\n                  </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs=\"12\" sm=\"6\">\n              <TextField\n                label=\"Origin\"\n                value={formData.origin}\n                fullWidth\n                name=\"origin\"\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs=\"12\" sm=\"6\">\n              <TextField\n                label=\"Destination\"\n                value={formData.destination}\n                fullWidth\n                onChange={handleChange}\n                name=\"destination\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <KeyboardTimePicker\n                    margin=\"normal\"\n                    label=\"STD\"\n                    required\n                    KeyboardButtonProps={{\n                      'aria-label': 'change time',\n                    }}\n                    fullWidth\n                    value={formData.std}\n                    onChange={handleDateChange.bind(null,\"std\")}\n                />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <KeyboardTimePicker\n                    margin=\"normal\"\n                    id=\"time-picker\"\n                    label=\"ETD\"\n                    KeyboardButtonProps={{\n                      'aria-label': 'change time',\n                    }}\n                    fullWidth\n                    onChange={handleDateChange.bind(null,\"etd\")}\n                    value={formData.etd}\n                />\n            </Grid>\n          </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={true} color=\"default\">\n          Cancel\n        </Button>\n        <Button variant=\"contained\" color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline>\n      <ThemeProvider theme={theme}>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <App />\n        </MuiPickersUtilsProvider>\n      </ThemeProvider>\n    </CssBaseline>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}